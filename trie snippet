
const int triesize = 26;
const int triebase = 'a';

struct trienode{
    struct trienode *children[triesize];
    bool isend = false;
};

struct trietree{

    struct trienode *root;

    struct trienode *getnode(){
        struct trienode *pNode =  new trienode; 
        pNode->isend = false; 
        for (int i = 0; i < triesize; i++)
            pNode->children[i] = NULL;
        return pNode; 
    }

    void init(){
        root = getnode();
    }

    void insert(string &key){
        struct trienode *crawl = root;
        for(auto &ch: key){
            if(crawl -> children[ch-triebase] == NULL){
                crawl -> children[ch - triebase] = getnode();
            }
            crawl = crawl -> children[ch - triebase];   
        }
        crawl -> isend = true;
    }

    bool search(string &key){
        struct trienode *crawl = root;
        for(auto &ch: key){
            if(crawl -> children[ch- triebase] == NULL){
                return false;
            }
            crawl = crawl -> children[ch - triebase];   
        }
        return crawl -> isend;
    }

    bool isEmpty(trienode *node){
        for(int i = 0 ; i < triesize; i++){
            if(node -> children[i]){
                return false;
            }
        }
        return true;
    }

    trienode* remove(trienode* node, string &key, int depth = 0) {
        if (!node) 
            return NULL; 
    
        if (depth == key.size()) { 
            if (node->isend) 
                node->isend = false; 
    
            if (isEmpty(node)) { 
                delete(node); 
                node = NULL; 
            } 
            return node; 
        } 
        int index = key[depth] - triebase; 
        node->children[index] =  
            remove(node->children[index], key, depth + 1); 
    
        if (isEmpty(node) && node->isend == false) { 
            delete(node); 
            node = NULL; 
        } 
        return node; 
    } 

    void remove(string &key){
        remove(root, key);
    }

};
